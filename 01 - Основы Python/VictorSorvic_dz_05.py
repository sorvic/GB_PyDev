'''
Написать генератор нечётных чисел от 1 до n (включительно), используя ключевое слово yield, например:
>> odd_to_15 = odd_nums(15)
>> next(odd_to_15)
1
>> next(odd_to_15)
3
..
>> next(odd_to_15)
15
>> next(odd_to_15)
..StopIteration..
'''
print('\nЗадание №1')

def odd_to_15(num):
    for i in range(1, num + 1, 2):
        yield i

nums_gen = odd_to_15(15)

print(next(nums_gen))  # 1-ое значение
print(next(nums_gen), '\n')  # 2-ое значение

# Выводим оставшиеся значения
for i in nums_gen:
    print(i)


'''
*(вместо 1) Решить задачу генерации нечётных чисел от 1 до n (включительно), не используя ключевое слово yield.
'''
print('\nЗадание №2')

n = 15
nums_gen = (i for i in range(1, n + 1, 2))

print(next(nums_gen))  # 1-ое значение
print(next(nums_gen), '\n')  # 2-ое значение

# Выводим оставшиеся значения
for i in nums_gen:
    print(i)


'''
3. Есть два списка:
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
..
Количество генерируемых кортежей не должно быть больше длины списка tutors.
Если в списке klasses меньше элементов, чем в списке tutors,
необходимо вывести последние кортежи в виде: (<tutor>, None), например:
('Станислав', None)
Доказать, что вы создали именно генератор.
Проверить его работу вплоть до истощения.
Подумать, в каких ситуациях генератор даст эффект.
'''
print('\nЗадание №3')
# посмотреть модуль из модуля intertools ziplongest???
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]

result = {}
tutors_new = ((tutor, klass) for tutor, klass in zip(tutors, klasses))
print(next(tutors_new))  # 1-ый элемент
print(list(tutors_new))  # оставщиеся

# подглядел у преподавател
'''
import itertools
itertools.zip_longest(*iterables, fillvalue=None)
Параметры:
*iterables - итерируемые последовательности,
fillvalue=None - заполнитель, если одна из итераций меньше.
'''
from itertools import zip_longest
tutors_new = ((tutor, klass) for tutor, klass in zip_longest(tutors, klasses))
print(next(tutors_new))  # 1-ый элемент
print(list(tutors_new))  # оставщиеся

'''
4. Представлен список чисел. Необходимо вывести те его элементы, значения которых больше предыдущего, например:
src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = [12, 44, 4, 10, 78, 123]

Подсказка: использовать возможности python, изученные на уроке.
Подумайте, как можно сделать оптимизацию кода по памяти, по скорости.
'''
print('\nЗадание №4')
# list comprehensions
src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

result = [num for i, num in enumerate(src) if (num > src[i-1]) and (i != 0)]
print(result)



'''
5. Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать из этих элементов список с сохранением порядка
их следования в исходном списке, например:
src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [23, 1, 3, 10, 4, 11]

Подсказка: напишите сначала решение «в лоб». Потом подумайте об оптимизации.
'''
print('\nЗадание №5')
# list comprehensions
src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

result = [num for num in src if src.count(num) == 1]

print(result)
